<?php

module_load_include('inc', 'tccc', '/includes/model');
module_load_include('inc', 'tccc', '/includes/theme');
module_load_include('inc', 'tccc', '/includes/util');
module_load_include('inc', 'tccc', '/includes/field');

;

/**
 * Implements hook_snippet_directory().
 */
function tccc_snippet_directory() {
  return 'snippets';
}

/**
 * @file
 * Bulk export of objects generated by Bulk export module.
 */

/**
 * Implement hook_views_api().
 */
function tccc_views_api($module, $api) {
  if ($module == 'views' && $api == 'views_default') {
    return array('version' => 2);
  }
}

/**
 * Implement hook_ctools_plugin_api().
 */
function tccc_ctools_plugin_api($module, $api) {
  if ($module == 'panels' && $api == 'pipelines') {
    return array('version' => 1);
  }
  if ($module == 'panels_mini' && $api == 'panels_default') {
    return array('version' => 1);
  }
  if ($module == 'field_group' && $api == 'field_group') {
    return array('version' => 1);
  }
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function tccc_ctools_plugin_directory($module, $plugin) {
  if (($module == 'ctools' || $module == 'panels') && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_menu().
 */
function tccc_menu() {
  $items['dummy'] = array(
    'title' => 'Dummy',
    'page callback' => '_tccc_dummy',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['column'] = array(
    'title' => 'column',
    'page callback' => '_tccc_dummy',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['ccb-events'] = array(
    'title' => 'CCB events',
    'page callback' => '_tccc_ccb_events',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['feeds'] = array(
    'title' => 'Social Media feeds',
    'page callback' => '_tccc_social_feeds',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function _tccc_dummy() {
  return array();
}

function _tccc_social_feeds($limit = 0) {

  if (!function_exists('aggregator_page_source')) {
    module_load_include('inc', 'aggregator', 'aggregator.pages');
  }

  $output = '';

  $category = aggregator_category_load(1);
  $items = aggregator_feed_items_load('category', $category);
  $num_of_items = 3;

  foreach ($items as $delta => $item) {


    if ($limit > 0 && $delta == $limit) {
      break;
    }

    $desc = $item->description;

    if ($item->ftitle == "Twitter") {
      $desc = makeClickableLinks($desc);
    }

    $output .= '<div class="feed-item item-' . $delta . '">';
    $output .= '<p>' . strip_tags($desc, '<a>') . '</p>';
    $output .= date('D jS F. ', $item->timestamp);
    $output .= 'Source: ' . l($item->ftitle, $item->link, array('attributes' => array('target' => '_blank')));
    $output .= '</div>';
  }

  return $output;
}

function makeClickableLinks($text) {
  $text = eregi_replace('(((f|ht){1}tp://)[-a-zA-Z0-9@:%_+.~#?&//=]+)', '<a href="\1">\1</a>', $text);
  $text = eregi_replace('([[:space:]()[{}])(www.[-a-zA-Z0-9@:%_+.~#?&//=]+)', '\1<a href="http://\2">\2</a>', $text);
  $text = eregi_replace('([_.0-9a-z-]+@([0-9a-z][0-9a-z-]+.)+[a-z]{2,3})', '<a href="mailto:\1">\1</a>', $text);

  return $text;
}

function _tccc_get_feed($url) {
  $ch = curl_init();
  //curl_setopt($ch, CURLOPT_POSTFIELDS,  $encoded);  
  curl_setopt($ch, CURLOPT_USERPWD, variable_get('ccb_auth_user') . ':' . variable_get('ccb_auth_pass'));
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_URL, $url);

  $xmlResponse = curl_exec($ch);
  curl_close($ch);
  $dom = new DOMDocument();
  $dom->loadXML($xmlResponse);
  return $dom;
}

function _tccc_ccb_events() {

  $dom = _tccc_get_feed('http://thecitychurch.ccbchurch.com/api.php?srv=public_calendar_listing&date_start=2011-01-01&date_end=2013-01-01');
  $items = $dom->getElementsByTagName('item');
  $elements = array();

  foreach ($items as $item) {

    $id = $item->getElementsByTagName('event_name')->item(0)->getAttribute('ccb_id');

    $title = $item->getElementsByTagName('event_name')->item(0)->nodeValue;
    $description = $item->getElementsByTagName('event_description')->item(0)->nodeValue;
    $location = $item->getElementsByTagName('location')->item(0)->nodeValue;
    $date = $item->getElementsByTagName('date')->item(0)->nodeValue;
    $start_stamp = $date . 'T' . $item->getElementsByTagName('start_time')->item(0)->nodeValue;
    $start_stamp = strtotime($start_stamp);
    $end_stamp = $date . ' ' . $item->getElementsByTagName('end_time')->item(0)->nodeValue;
    $end_stamp = strtotime($end_stamp);


    $elements[] = array(
      'id' => $id,
      'description' => $description,
      'title' => $title,
      'start' => $start_stamp,
      'end' => $end_stamp,
      'location' => $location,
    );
  }
  //print_r($elements);
  print json_encode($elements);
  exit;
}

/**
 * Implements hook_block_info().
 */
function tccc_block_info() {
  return array(
    'header' => array(
      'info' => t('TCCC Header'),
    ),
    'footer' => array(
      'info' => t('TCCC Footer'),
    ),
  );
}

function tccc_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'header':
      module_load_include('inc', 'tccc', '/includes/header_and_footer');
      $block['content'] = _tccc_header();
      break;
    case 'footer':
      module_load_include('inc', 'tccc', '/includes/header_and_footer');
      $block['content'] = _tccc_footer();
      break;
  }
  return $block;
}

function _tccc_strtoproper($string) {
  return ucwords(strtolower($string));
}

/*
 * Returns the name of the book
 */

function _tccc_parse_book($ref) {
  $ref = explode(' ', ltrim(rtrim($ref)));
  if (is_numeric($ref[0])) {
    return $ref[0] . ' ' . $ref[1];
  }
  else {
    return $ref[0];
  }
}

/*
 * Useful function used to download files to server so that image cahce can be applied
 */

function get_remote_image_from_url($url) {
  $external_image_path = file_default_scheme() . '://external';

  $image = file_get_contents($url);

  $cut_url = str_ireplace("http://", "", $url);
  $cut_url = preg_replace("/^[^\/]*\//", "", $cut_url);
  $image_name = str_ireplace("/", "-", $cut_url);

  $image_path = $external_image_path . '/' . $image_name;

  return file_unmanaged_save_data($image, $image_path, FILE_EXISTS_REPLACE);
}

/**
 * Implements hook_image_default_styles().
 */
function tccc_image_default_styles() {
  $styles = array();
  $styles['featured_events'] = _tccc_make_scale_and_crop_image_style(85, 85);
  $styles['header_image'] = _tccc_make_scale_and_crop_image_style(960, 376);
  $styles['video_medium'] = _tccc_make_scale_and_crop_image_style(278, 156);
  $styles['author_thumbnail'] = _tccc_make_scale_and_crop_image_style(68, 68);
  $styles['resources_feature'] = _tccc_make_scale_and_crop_image_style(231, 130);
  $styles['inline_threecol_equal'] = _tccc_make_scale_image_style_width(277);
  $styles['inline_threecol_left'] = _tccc_make_scale_image_style_width(173);
  $styles['inline_threecol_right'] = _tccc_make_scale_image_style_width(173);
  $styles['inline_twocol_left'] = _tccc_make_scale_image_style_width(298);
  return $styles;
}

function _tccc_sermon_metadata($sermon) {
  $result = array();

  if (!empty($sermon->field_person)) {
    $person = taxonomy_term_load($sermon->field_person['und'][0]['tid']);
    $result['person'] = array(
      'name' => $person->name,
      'link' => l($person->name, 'resources/sermons/people/' . $speaker->tid),
    );
  }

  if (!empty($sermon->field_recording_date)) {
    $result['date'] = date('l jS F Y', strtotime($sermon->field_recording_date['und'][0]['value']));
  }

  if (!empty($sermon->field_media_length)) {
    $result['length'] = $sermon->field_media_length['und'][0]['value'];
  }

  if (!empty($sermon->field_media_series)) {
    $series = taxonomy_term_load($sermon->field_media_series['und'][0]['tid']);
    $result['series'] = array(
      'name' => $series->name,
      'link' => l($series->name, 'taxonomy/term/' . $series->tid),
    );
  }

  if (!empty($sermon->field_tags)) {
    $tags = array();
    foreach (field_get_items('node', $sermon, 'field_tags') as $item) {
      $term = taxonomy_term_load($item['tid']);
      $tags[] = l($term->name, 'resources/sermons/tag/' . $term->tid);
    }
    $result['tags'] = implode($tags, ', ');
  }

  return $result;
}

function tccc_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {

    case 'search_form':
      $form['basic']['submit']['#value'] = 'Go';
      $form['#attributes']['class'][] = 'clearfix';
      break;

    default:
      break;
  }
}

function _tccc_vimeo_metadata($id) {
  $feed = 'http://vimeo.com/api/v2/video/' . $id . '.xml';
  $videos = new SimpleXMLElement($feed, null, true);
  return $videos[0]->video;
}

function _tccc_media_image($node, $preset) {

  // first, does the entity have it's own image?
  if (field_get_items('node', $node, 'field_image')) {
    return _tccc_render_image('node', $node, 'field_image', $preset);
  }

  // second, does it have a vimeo ID from which we can get an image?
  foreach (field_get_items('node', $node, 'field_vimeo_id') as $vimeo_id) {
    $metadata = _tccc_vimeo_metadata($vimeo_id['safe_value']);
    $attributes = array(
      'src' => check_url($metadata->thumbnail_large),
    );
    if ($preset == 'resources_feature') {
      $style = image_style_load($preset);
      $attributes['width'] = $style['effects'][0]['data']['width'];
      $attributes['height'] = $style['effects'][0]['data']['height'];
    }
    return '<img' . drupal_attributes($attributes) . '>';
  }

  // third, does it have a series and does that have an image?
  foreach (field_get_items('node', $node, 'field_media_series') as $item) {
    $series = taxonomy_term_load($item['tid']);
    if (field_get_items('taxonomy_term', $series, 'field_video_image')) {
      return _tccc_render_image('taxonomy_term', $series, 'field_video_image', $preset);
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function tccc_entity_info_alter(&$entity_info) {
  unset($entity_info['file']['view modes']['media_large']);
  unset($entity_info['file']['view modes']['media_small']);
  unset($entity_info['file']['view modes']['media_link']);
  $entity_info['file']['view modes']['tccc_three_equal'] = array('label' => t('Suitable for layouts with 3 equal columns'), 'custom settings' => TRUE);
  $entity_info['file']['view modes']['tccc_three_left'] = array('label' => t('Suitable for left column on layouts with 3 unequal columns'), 'custom settings' => TRUE);
  $entity_info['file']['view modes']['tccc_three_right'] = array('label' => t('Suitable for right column on layouts with 3 unequal columns'), 'custom settings' => TRUE);
  $entity_info['file']['view modes']['tccc_two_left'] = array('label' => t('Suitable for left column on layouts with 2 columns'), 'custom settings' => TRUE);
}

