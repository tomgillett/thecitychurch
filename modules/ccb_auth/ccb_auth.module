<?php

/**
 * @file
 * Add CCB authentication using CCB API
 * 
 * Note: php_openssl extension must be enabled as API requests must be over SSL
 */

/**
 * Implement hook_permission()
 */
function ccb_auth_permission() {
  return array(
    'administer ccb auth' => array(
      'title' => t('Administer CCB auth module'), 
    ),
  );
}

/**
 * Implement hook_menu().
 */
function ccb_auth_menu() {
  $items = array();
  
  $items['admin/config/people/ccb'] = array(
    'title' => 'CCB Authentication',
    'description' => 'Configure CCB Authentication',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ccb_auth_admin_form'),
    'access arguments' => array('administer ccb auth'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ccb_auth.admin.inc',
  );
  
  return $items;
}

/**
 * Implement hook_form_FORM_ID_alter for login form (example.com/user)
 */
function ccb_auth_form_user_login_alter(&$form, &$form_state, $form_id) {
  _ccb_auth_form_user_login_alter($form, $form_state, $form_id);
}

/**
 * Implement hook_form_FORM_ID_alter for user_login_block
 */
function ccb_auth_form_user_login_block_alter(&$form, &$form_state, $form_id) {
  _ccb_auth_form_user_login_alter($form, $form_state, $form_id);
}

/**
 * Helper function for ccb_auth_form_user_login_alter and ccb_auth_form_user_login_block_alter
 * This function alters the validate functions on the login form to add CCB authentication
 */
function _ccb_auth_form_user_login_alter(&$form, &$form_state, $form_id) {
  // Add CCB auth after Drupal auth.
  // Drupal auth must be first - http://drupal.org/node/1022362
  $form['#validate'] = array('user_login_name_validate', 'user_login_authenticate_validate', 'ccb_auth_user_login_validate', 'user_login_final_validate');
  
  // Remove links from login block - new users and password resets should be done through CCB not Drupal
  if ($form_id == 'user_login_block') $form['links']['#markup'] = '';
}

/**
 * Validate function for user logon forms.
 */
function ccb_auth_user_login_validate($form, &$form_state) {
  // Shorter variables for 2 form inputs
  $name = $form_state['values']['name'];
  $pass = $form_state['values']['pass'];
  
  // API URL
  $url = 'https://' . variable_get('ccb_auth_user') . ':' . variable_get('ccb_auth_pass') . '@' . variable_get('ccb_auth_url');
  
  // Attempt to load account using the specified username.
	$account = user_load_by_name($name);
	
  // Don't try to authenticate user ID 1
  if(is_object($account) && $account->uid == 1) {
    return FALSE;
  }
  
  // Check login with CCB
  $settings = array (
    'srv' => 'individual_id_from_login_password',
    'login' => $name,
    'password' => $pass,
  );
  $response = drupal_http_request($url . '?' . http_build_query($settings));
  
  // Convert response to XML object
  $xml = new SimpleXMLElement($response->data);
  
  // Check if CCB auth was successful
  if ($xml->response->items && $xml->response->items->attributes()->count == 1) {
    // Save CCB user ID
    $id = (string) $xml->response->items->item->id;
    
    // Get name, email etc from CCB
    $settings = array (
      'srv' => 'individual_credentials_from_id',
      'id' => $id,
    );
    $response = drupal_http_request($url . '?' . http_build_query($settings));
  
    // Convert response to XML object
    $credentials = new SimpleXMLElement($response->data);

		// Perform a lookup of CCB ID against the Drupal <-> CCB User map.
		$result = db_query('SELECT uid FROM {ccb_auth_map} WHERE ccb_id = :ccb_id LIMIT 1', array(':ccb_id' => $id));
		$map = $result->fetchObject();

		// Load account object using UID if present.
    if(isset($map->uid)){
			$account = user_load($map->uid);
		}
    
    // Create or update Drupal account
    require_once DRUPAL_ROOT . '/includes/password.inc';
    $edit['name'] = (string) $credentials->response->individuals->individual->login;
    $edit['pass'] = user_hash_password($credentials->response->individuals->individual->password);
    $edit['mail'] = (string) $credentials->response->individuals->individual->email;
    $edit['status'] = 1;
    $account = user_save($account, $edit);

		// If we have just created a new user, save UID <-> CCB_ID mapping to the map table.
		if(!isset($map->uid)){
			$map = array('uid' => $account->uid, 'ccb_id' => $id);
			
			// If login cannot be mapped, fail login.
			if(!db_insert('ccb_auth_map')->fields($map)->execute()){
				return false;
			}
		}
    
    // Get CCB groups for user
    $settings = array (
      'srv' => 'individual_groups',
      'individual_id' => $id,
    );
    $response = drupal_http_request($url . '?' . http_build_query($settings));
    
    // Convert response to XML object
    $groups = new SimpleXMLElement($response->data);
    
    // Build an array of group/role pairings
    // $group_link[ccb group id][drupal role id]
    $group_roles = explode(';', variable_get('ccb_auth_groups'));
    foreach ($group_roles as $pair) {
      list($key, $val) = explode(',', $pair);
      $group_link[$key] = $val;
    }
    
    // Load all existing roles into the editing array
    $edit = array(
      'roles' => $account->roles,
    );
    
    $admin_role_id = variable_get('user_admin_role', 0);

    // Loop through group memberships returned from CCB, generate an array.
    $ccb_groups = array();
    foreach ($groups->response->individuals->individual->groups->group as $group) { 
      $ccb_groups[] = (int) $group->id;
    }

    // Loop through all of our Drupal / CCB sync pairs.
    foreach($group_link as $ccb_id => $drupal_id){
      // Add any roles which ARE synchronised with CCB, and ARE NOT already associated.
      // (e.g. a user has a group on CCB, but does not have the synchronised role in Drupal)
      if(in_array($ccb_id, $ccb_groups) && !in_array($drupal_id, $edit['roles'])){
        if ($role_id != $admin_role_id) $edit['roles'][$drupal_id] = $drupal_id;
      }

      // Remove any roles which ARE synchronised with CCB and ARE already paired but ARE NOT associated in CCB.
      // (e.g. removes users from roles in Drupal when they are no longer a part of the CCB group)
      if(in_array($drupal_id, $edit['roles']) && !in_array($ccb_id, $ccb_groups)){
        unset($edit['roles'][$drupal_id]);
      }
    }
    
    // Save role assignments
    $account = user_save($account, $edit);
    
    // Login user
    $fake_form_state['uid'] = $account->uid;
    user_login_submit(array(), $fake_form_state);
    global $user;
    $form_state['uid'] = $user->uid;
    return;
  } else {
    return FALSE;
  }
}
